package com.tms.taskManagementSystem.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.tms.taskManagementSystem.entity.User;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import jakarta.transaction.Transactional;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Scanner;

@Repository
public class UserDAOImpl implements UserDAO {

    private EntityManager entityManager;

    // constructor injection
    @Autowired
    public UserDAOImpl(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    // CREATE / POST METHODS

    @Override
    @Transactional
    public User addAssignee() {
        List<User> assignees = getAssignees();
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        // assignee list size
        int alSize = assignees.size();
        // retrieving the last assignee's userId
        String getSuffix[] = assignees.get(alSize - 1).getUserId().split("_");
        int digits = Integer.parseInt(getSuffix[1]);
        int newDigit = digits + 1;
        String newDigitStr = String.valueOf(newDigit);
        String newAssigneeUserId = "NEE_" + newDigitStr;
        System.out.println("New user id for the assignee created!");
        System.out.println("The new assignee's autogenerated user id is: " + newAssigneeUserId);
        // get the password and name from the assignor
        try {
            System.out.println("Enter the name: ");
            String name = reader.readLine();
            System.out.println("Enter the password: ");
            String password = reader.readLine();
            User newUser = new User(name, newAssigneeUserId, password);
            // addUsers(newUser);
            entityManager.merge(newUser);
            return newUser;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        // it triggers the addAssignee method after adding a new user is added to the
        // userAuth map
        // addAssignee();
    }

    // READ / GET methods
    @Override
    public List<User> getAssignees() {
        TypedQuery<User> theQuery = entityManager.createQuery("FROM User WHERE userId LIKE 'NEE%'", User.class);
        return theQuery.getResultList();

    }

    @Override
    public List<User> getAllUsers() {
        TypedQuery<User> theQuery = entityManager.createQuery("FROM User", User.class);
        return theQuery.getResultList();
    }

    @Override
    public User getUserById(String userId) {
        User user = entityManager.find(User.class, userId);
        return user;
    }

    // UPDATE / PUT methods

    @Override
    @Transactional
    public User updateAssignee(String userId) {
        Scanner input = new Scanner(System.in);
        User user = entityManager.find(User.class, userId);
        System.out.println("Enter name: ");
        String name = input.nextLine();
        System.out.println("Enter password: ");
        String password = input.nextLine();
        user.setName(name);
        user.setPassword(password);
        entityManager.merge(user);
        return user;
    }

    // Other methods
    @Override
    public boolean checkCredentials(String userId, String password) {
        List<User> users = getAllUsers();
        for (User user : users) {
            if (user.getUserId().equals(userId)) {
                if (user.getPassword().equals(password)) {
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public String getUserType(String userId) {
        String type[] = userId.split("_");
        if (type[0].equals("NOR")) {
            return "NOR";
        }
        return "NEE";
    }

    @Override
    @Transactional
    public User deleteAssignee(String userId) {
        User user = entityManager.find(User.class, userId);
        entityManager.remove(user);
        return user;
    }

    @Override
    public String authentication(String userId, String password) {
        if (userId == null || password == null) {
            return "Auth Invalid";
        }
    
        User user = entityManager.find(User.class, userId);
    
        if (user != null) {
            String dbPassword = user.getPassword();
            if (password.equals(dbPassword)) {
                System.out.println("Auth valid");
                return user.getUserId();
            }
        }
        return "Auth Invalid";
    }
    

}
